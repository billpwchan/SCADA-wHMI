<?xml version="1.0" encoding="UTF-8"?>

<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <http auto-config="false" entry-point-ref="authenticationProcessingFilterEntryPoint">

        <!-- Uncomment the following when using SSL (and comment the other <intercept-url tags>) -->
        <!--
    <port-mappings>
        <port-mapping http="8380" https="8743"/>
    </port-mappings>
    <intercept-url pattern="/scslogin/**" access="IS_AUTHENTICATED_ANONYMOUSLY" requires-channel="https"/>
    <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"  requires-channel="https"/>
    -->

        <!-- Uncomment this section (and comment the section above to disable httpS --> 
        <intercept-url pattern="/scslogin/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <custom-filter position="BASIC_AUTH_FILTER" ref="MwtAuthenticationFilter" />
        <logout logout-success-url="/scslogin/initialize?page=/scslogin/ScsLogin.html" logout-url="/scsmain/j_spring_security_logout"/>
        <anonymous />
    </http>

    <!-- Property Resource Configurer -->

    <beans:bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <beans:property name="locations">
            <beans:value>classpath:mwt-ldap.properties</beans:value>
        </beans:property>
    </beans:bean>

    <!-- To use the GWT devmode, add the following parameter to the urlS: ?gwt.codesvr=127.0.0.1:9997  -->
    <!-- ex: login-page="/scslogin/initialize?page=/scslogin/ScsLogin.html&amp;gwt.codesvr=127.0.0.1:9997" and so on...-->
    <beans:bean id="MwtAuthenticationFilter"
        class="com.thalesgroup.hypervisor.mwt.core.webapp.core.security.server.CustomAuthenticationProcessingFilter">
        <beans:property name="sessionAuthenticationStrategy" ref="sas" />
        <beans:property name="filterProcessesUrl" value="/scslogin/j_spring_security_check" />
        <beans:property name="targetUrl" value="/scsmain/initialize?page=/scsmain/ScsMain.html" />
        <beans:property name="failureUrl" value="/scslogin/initialize?page=/scslogin/ScsLogin.html" />
        <beans:property name="authenticationManager" ref="authenticationManager" />
    </beans:bean>

    <!-- Session Authentication Strategy -->
    <beans:bean id="sas"
	      class="com.thalesgroup.hvpp.opmgate.OpmAuthentifier">
		<beans:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
        <beans:property name="maximumSessions" value="-1" />
        <beans:property name="exceptionIfMaximumExceeded" value="true" />
    </beans:bean>

    <!-- Session Registry -->

    <beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

    <!-- Authentication Manager -->

    <authentication-manager alias="authenticationManager" >

        <!-- Authentication provider to be used while developing. It must be commented 
        if the LDAP authentication is used -->
        <!--
        <authentication-provider>
            <user-service>
                <user name="chief" password="thales" authorities="ROLE:megavisor" />
				<user name="OPERATOR" password="PASSWORD@1" authorities="ROLE:megavisor" />
            </user-service> 
        </authentication-provider>
	-->

        <!-- LDAP authentication provider -->
        <authentication-provider ref="ldapAuthProvider" />

    </authentication-manager>

    <beans:bean id="authenticationProcessingFilterEntryPoint"
        class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <beans:property name="loginFormUrl" value="/scslogin/initialize?page=/scslogin/ScsLogin.html" />
        <beans:property name="forceHttps" value="false" />
    </beans:bean>

    <!-- Parameters to access the external directory server -->
    <beans:bean id="contextSource"
        class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
        <beans:constructor-arg value="${ldap.source.url}" />
        <beans:property name="userDn" value="${ldap.source.userDn}" />
        <beans:property name="password" value="${ldap.source.password}" />
    </beans:bean>

    <!-- LDAP Authentication Provider -->
    <beans:bean id="ldapAuthProvider"
        class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
        <beans:constructor-arg ref="authenticator" />
        <beans:constructor-arg ref="populator" />
    </beans:bean>

    <!-- LDAP Authenticator -->
    <beans:bean id="authenticator"
        class="org.springframework.security.ldap.authentication.BindAuthenticator">
        <beans:constructor-arg ref="contextSource" />
        <beans:property name="userSearch">
            <beans:bean id="userSearch"
                class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
                <beans:constructor-arg index="0" value="${ldap.authenticator.searchBase}" />
                <beans:constructor-arg index="1" value="${ldap.authenticator.searchFilter}" />
                <beans:constructor-arg index="2" ref="contextSource" />
            </beans:bean>
        </beans:property>
    </beans:bean>

    <!-- LDAP Authorities Populator -->
    <beans:bean id="populator"
		class="com.thalesgroup.hypervisor.mwt.core.webapp.core.security.server.ldap.ApacheDsAuthoritiesPopulator">
        <beans:constructor-arg ref="contextSource" />
        <!-- group based DN - we will be searching for groups in "ou=groups,o=hypervisor" -->
        <beans:constructor-arg value="${ldap.populator.apache.groupSearchBase}" />

        <!-- the name of the attribute that will contain role information (which 
			effectively translates to a user's granted authorities. Default is "cn" -->
        <beans:property name="groupRoleAttribute" value="${ldap.populator.apache.groupRoleAttribute}" />

        <!-- Zoning Configuration-->

        <!-- Whether Zoning shall be enabled -->
        <beans:property name="enableZoning"    value="${ldap.populator.apache.enableZoning}" />
        <!-- Search DN used to retrieve Workstation entry in LDAP -->
        <beans:property name="wksSearchDnFilter"    value="${ldap.populator.apache.wksSearchDnFilter}" />
        <!-- Optional. Workstation Identifier Domain Suffix. The Suffix will be removed from Workstation Id for LDAP Request -->
        <beans:property name="wksIdDomainSuffix"    value="${ldap.populator.apache.wksIdDomainSuffix}" />   		 
        <!-- An LDAP zone object is considered as an HV zone ONLY IF it is included in this Search Sub-Tree DN -->
        <beans:property name="zoneSearchBaseDn"    value="${ldap.populator.apache.zoneSearchBaseDn}" />
        <!-- The name of the attribute that will contain Zone identifier -->
        <beans:property name="zoneRoleAttribute"    value="${ldap.populator.apache.zoneRoleAttribute}" />

    </beans:bean>

    <!-- Change-Password Bean Configuration -->
    <beans:bean id="passChanger" class="com.thalesgroup.scadagen.wrapper.wrapper.server.opm.SCADAgenLdapChangePassword">
        <!--  LDAP template to access the server -->
        <beans:property name="ldapTemplate">
            <beans:bean id="simpleLdapTemplate" class="org.springframework.security.ldap.SpringSecurityLdapTemplate">
                <beans:constructor-arg ref="contextSource" />
            </beans:bean>
        </beans:property>
        <!-- Encoding Password Method -->
        <beans:property name="pwdEncoder">
            <beans:bean class="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder" />
        </beans:property>
    </beans:bean>

    <!-- LDAP Path Post Processor -->

    <beans:bean id="ldapPathPostProcessor" class="org.springframework.ldap.core.support.BaseLdapPathBeanPostProcessor">
    </beans:bean>

</beans:beans>
