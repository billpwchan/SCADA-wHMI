
package com.thalesgroup.prj_gz_cocc.gwebhmi.main.client;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import com.google.gwt.event.logical.shared.CloseEvent;
import com.google.gwt.event.logical.shared.CloseHandler;
import com.google.gwt.event.logical.shared.SelectionEvent;
import com.google.gwt.event.logical.shared.SelectionHandler;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.user.client.ui.Widget;
import com.thalesgroup.hypervisor.mwt.core.webapp.core.common.client.ClientLogger;
import com.thalesgroup.hypervisor.mwt.core.webapp.core.common.client.event.NavigationActivationEvent;
import com.thalesgroup.hypervisor.mwt.core.webapp.core.common.client.event.NavigationActivationEvent.NavigationActivationHandler;
import com.thalesgroup.hypervisor.mwt.core.webapp.core.common.client.event.NavigationSelectionEvent;
import com.thalesgroup.hypervisor.mwt.core.webapp.core.ui.client.matrix.event.MatrixNavigationEvent;
import com.thalesgroup.hypervisor.mwt.core.webapp.core.ui.client.matrix.event.MatrixNavigationEvent.MatrixNavigationHandler;
import com.thalesgroup.hypervisor.mwt.core.webapp.core.ui.client.matrix.presenter.MatrixContext;
import com.thalesgroup.hypervisor.mwt.core.webapp.core.ui.client.panel.IClientLifeCycle;
import com.thalesgroup.prj_gz_cocc.gwebhmi.main.client.dialogs.GenInfoDialog;
import com.thalesgroup.prj_gz_cocc.gwebhmi.main.client.layout.CoccAppPanel;
import com.thalesgroup.prj_gz_cocc.gwebhmi.main.client.panels.CoccPanelFactory;
import com.thalesgroup.scadasoft.gwebhmi.main.client.AppUtils;
import com.thalesgroup.scadasoft.gwebhmi.main.client.event.OpenSituationViewEvent;
import com.thalesgroup.scadasoft.gwebhmi.main.client.event.OpenSituationViewEventHandler;
import com.thalesgroup.prj_gz_cocc.gwebhmi.main.client.layout.CoccTabLayoutPanel;

/**
 * This class handle events which have an application-level impact.
 */
public class CoccAppEventsHandler implements NavigationActivationHandler, IClientLifeCycle, SelectionHandler<Integer>,
CloseHandler<String>, OpenSituationViewEventHandler, MatrixNavigationHandler {

    /**
     * Widget containing {@link com.thalesgroup.scadasoft.gwebhmi.main.client.layout.ActionPanel
     * ActionPanel}
     */
    private CoccTabLayoutPanel m_panelsContainer;

    /**
     * Used to remove event handler
     */
    private List<HandlerRegistration> m_handlerRegistrations;

    /**
     * Keeps track of panel container state
     */
    private final Map<Widget, String> m_navIdPerWidgetMap;

//    private CoccAppPanel m_appPanel;

    /** Logger */
    private final ClientLogger s_logger = ClientLogger.getClientLogger();
    
    /** Info Dialog */
    private final GenInfoDialog m_infoDialog = new GenInfoDialog();

    /**
     * Constructor
     *
     * @param tabPanelsContainer_ Widget containing
     *            {@link com.thalesgroup.scadasoft.gwebhmi.main.client.layout.ActionPanel ActionPanel}
     * @param coccAppPanel Used to dispatch layout event
     */
    public CoccAppEventsHandler(final CoccTabLayoutPanel tabPanelsContainer_,CoccAppPanel coccAppPanel) {
        m_panelsContainer = tabPanelsContainer_;
        m_handlerRegistrations = new ArrayList<HandlerRegistration>();
        m_navIdPerWidgetMap = new HashMap<Widget, String>();
//        m_appPanel = coccAppPanel;
        addEventHandlers();
    }

    /**
     * Add handlers in order to react to events.
     */
    private void addEventHandlers() {

        // Listen navigation events generated by the toolbar and the navigation panel
        if (AppUtils.EVENT_BUS != null) {
            m_handlerRegistrations.add(AppUtils.EVENT_BUS.addHandler(NavigationActivationEvent.TYPE, this));
            m_handlerRegistrations.add(AppUtils.EVENT_BUS.addHandler(OpenSituationViewEvent.TYPE, this));
            m_handlerRegistrations.add(AppUtils.EVENT_BUS.addHandler(MatrixNavigationEvent.TYPE, this));
        }

        // Listen tab selection events generated by the tab panel
        m_handlerRegistrations.add(m_panelsContainer.addSelectionHandler(this));

        // Listen tab close events generated by the tab panel
        m_handlerRegistrations.add(m_panelsContainer.addCloseHandler(this));
    }

    /**
     * Add or select panels in the {@link CoccTabLayoutPanel} according to
     * {@link NavigationActivationEvent} events.
     *
     * @param event {@link NavigationActivationEvent} event
     */
    @Override
    public void onNavigationActivationEvent(final NavigationActivationEvent event) {
        final String navigationId = event.getNavId();

        s_logger.debug("AppEventsHandler onNavigationActivationEvent :" + navigationId);

        if (navigationId != null) {
            Widget w = getWidgetFromNavId(navigationId);

            // The panel associated with the navigationId is NOT PRESENT in the TabLayoutPanel
            if (w == null) {
            	// 20150720 delo: [COCC-16] Tab Management
            	if(m_panelsContainer.reachesMaxNumOfTabs()) {
            		// Num of Tabs Reached Limit, Notify the Operator
            		m_infoDialog.showDialogWithButton("info_dialog_header_tabs_reach_limit",
            				"info_dialog_msg_tabs_reach_limit",
            				"info_dialog_btn_tabs_reach_limit");
            	} else {
            		// Num of tabs has not reached limit, add new tab
	                final Widget widget = CoccPanelFactory.createPanelFromNavId(navigationId);
	                if (widget != null) {
	                    m_panelsContainer.add(widget, navigationId, true);
	                    m_navIdPerWidgetMap.put(widget, navigationId);
	                }
            	}
            } else {
                // The panel associated with the navigationId is PRESENT in the TabLayoutPanel
                m_panelsContainer.selectTab(w);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void terminate() {
        for (final HandlerRegistration registration : m_handlerRegistrations) {
            registration.removeHandler();
        }
        m_handlerRegistrations.clear();
    }

    /**
     * Called when a tab is selected.
     *
     * @param event {@link SelectionEvent}
     */
    @Override
    public void onSelection(final SelectionEvent<Integer> event) {
        s_logger.debug("AppEventsHandler onSelection : index " + event.getSelectedItem());
        if (event.getSelectedItem() != null) {
            Widget w = m_panelsContainer.getTabWidget(event.getSelectedItem());
            final String navId = m_navIdPerWidgetMap.get(w);
            s_logger.debug("AppEventsHandler onSelection :" + navId);
            if (navId != null) {
                AppUtils.EVENT_BUS.fireEventFromSource(new NavigationSelectionEvent(navId), m_panelsContainer);
            } else {
                AppUtils.EVENT_BUS.fireEventFromSource(new NavigationSelectionEvent(null), m_panelsContainer);
            }
        }
    }

    /**
     * Called when a tab is closed.
     *
     * @param event {@link CloseEvent}
     */
    @Override
    public void onClose(final CloseEvent<String> event) {
        if (event.getTarget() != null) {
            final String navId = event.getTarget();
            s_logger.debug("AppEventsHandler onClose :" + navId);
            if (navId != null) {

                Iterator<Entry<Widget, String>> it = m_navIdPerWidgetMap.entrySet().iterator();
                while(it.hasNext()) {
                    String curNavId = it.next().getValue();
                    if (navId.equals(curNavId)) {
                        it.remove();
                    }
                }
            }
        }
    }

    /**
     * Returns the index of the tab containing the widget associated with a navigation id.
     *
     * @param navId navigation id
     * @return the widget index
     */
    private Widget getWidgetFromNavId(final String navId) {
        Widget widget = null;
        for (final Entry<Widget, String> entry : m_navIdPerWidgetMap.entrySet()) {
            if (entry.getValue().equals(navId)) {
                widget = entry.getKey();
                break;
            }
        }
        return widget;
    }
    /**
     * 
     * @param event {@link OpenSituationViewEvent}
     */
    @Override
    public void onSelectionChange(OpenSituationViewEvent event) {
        s_logger.debug("AppEventsHandler onSelectionChange :" + event.getSituationViewId());

//        if (m_appPanel.isMobileScreen()) {
//            m_appPanel.getMobileOverviewScreen().displaySituationView(event.getSituationViewId());
//        } else {
            NavigationActivationEvent navEvent = new NavigationActivationEvent(event.getSituationViewId());
            onNavigationActivationEvent(navEvent);
//        }

    }

	@Override
	public void onMatrixNavigationEvent(MatrixNavigationEvent event) {
		s_logger.debug("AppEventsHandler onMatrixNavigationEvent :" + event.getMatrixContextInfo().getAxisColumnId() + " " + event.getMatrixContextInfo().getAxisRowId());
		final MatrixContext mxContext = event.getMatrixContextInfo();
		
		if (mxContext != null) {
			final String configId_ = mxContext.getConfId();
			if (configId_ != null) {
			    String navId = configId_ + "_" + mxContext.getAxisRowId() + "_" + mxContext.getAxisColumnId();
				
				Widget w = getWidgetFromNavId(navId);

	            // The panel associated with the navigationId is NOT PRESENT in the TabLayoutPanel
	            if (w == null) {
	                final Widget widget = CoccPanelFactory.createMatrixPanel(configId_, mxContext.getAxisRowId(), mxContext.getAxisColumnId(), mxContext.getMxConfigType());
	                if (widget != null) {
	                    m_panelsContainer.add(widget, navId, true);
	                    m_navIdPerWidgetMap.put(widget, navId);
	                }
	            } else {
	                // The panel associated with the navigationId is PRESENT in the TabLayoutPanel
	                m_panelsContainer.selectTab(w);
	            }
			}
        }
	}
}
