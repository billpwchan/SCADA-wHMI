
package com.thalesgroup.scadagen.services.proxy;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sun.jna.CallbackThreadInitializer;
import com.sun.jna.Native;
import com.thalesgroup.scadagen.jna.api.IJNAXConnectorApi;


/**
 * Main class for management of connections to Scadasoft server.<BR>
 * </BR>
 * It initialize the connection to the Scadasoft server and maintains several
 * proxy which each represents a Scadasoft service (according to the connection
 * parameters).<BR>
 * </BR>
 * Each event generated by the Scadasoft server is retrieved and dispatched to a
 * proxy for its treatment.<BR>
 * </BR>
 * This class has an unique instance (Singleton).
 */

public class ScadagenConnectorProxy {

    static private final Logger s_logger = LoggerFactory.getLogger(ScadagenConnectorProxy.class);

    static public final String LIBRARY_NAME = "jfasapi";

    private static volatile ScadagenConnectorProxy s_instance;
    
    static private IJNAXConnectorApi x_api;

    private boolean m_isInitialized = false;

    private String m_serverName;

    private String m_localHost;

    private String m_logicalEnv;

    private CallbackThreadInitializer m_cbThreadConf;

    private ClassLoader m_JNAClassLoader;

    private String m_JNANotificationThreadName = "SCS_NOTIF_THREAD";

    /**
     * Instance accessor.
     * 
     * @return The unique instance (Singleton).
     */
    static public ScadagenConnectorProxy instance() {
        // Checked once
        if (s_instance == null) {
            // Synchronized on Class level lock
            synchronized (ScadagenConnectorProxy.class) {
                // Checked again
                if (s_instance == null) {
                    s_instance = new ScadagenConnectorProxy();
                }
            }
        }
        return s_instance;
    }

    /**
     * Returns the local computer name.<BR>
     * </BR>
     * The name is the value of the local.computer.name property.
     * 
     * @return The local computer name.
     */
    public String getLocalComputerName() {
        return m_localHost;
    }

    /**
     * Returns the physical environment name.<BR>
     * </BR>
     * The name is the result of the concatenation given by the
     * <B><I>local.environment.name</I></B> property with char '_' and with the
     * local computer name. <BR>
     * </BR>
     * Exemple: <B>SCSCtor_S0011414</B>
     * 
     * @return The physical environment name.
     */
    public String getLocalEnvironmentName() {
        return m_logicalEnv + "_" + m_localHost;
    }

    public String getLocalLogicalEnvironmentName() {
        return m_logicalEnv;
    }

    /**
     * Returns the logical client name.<BR>
     * </BR>
     * The name is the value of the <B><I>local.server.name</I></B> property.
     * 
     * @return The logical client name.
     */
    public String getLocalServerName() {
        return m_serverName;
    }

    /**
     * Indicates whether or not the connection to the Scadasoft server is
     * established.
     * 
     * @return true if the connection is on, false otherwise.
     */
    final public boolean isInitialized() {
        return m_isInitialized;
    }

    /**
     * Sets the connection state to the Scadasoft server.
     * 
     * @param set
     *            The state value.
     */
    final protected void setInitialized(boolean set) {
    	m_isInitialized = set;
    }

    CallbackThreadInitializer getJNANotifThreadConf() {
        return m_cbThreadConf;
    }

    public ClassLoader getJNAClassLoader() {
        return m_JNAClassLoader;
    }

    public String getJNANotificationThreadName() {
        return m_JNANotificationThreadName;
    }

    // ----------------------------------------------------------------------------
    // Services
    // ----------------------------------------------------------------------------

    // ----------------------------------------------------------------------------
    /**
     * Creates the JNA API.
     * 
     * @param physicalEnv
     *            the physical environment
     * 
     * @param serverName
     *            the name of the server
     * 
     * @param cb
     *            the notification callback
     */
    public void initialize(String physicalEnv, String serverName, com.thalesgroup.scadasoft.jna.api.IJNAConnectorApi.ASCChangeStateNotification cb) {
        s_logger.info("Scadagen Java connector initialization... {}@{}", serverName, physicalEnv);
        m_serverName = serverName;
        int underscore = physicalEnv.indexOf("_");
        if (underscore == -1) {
            s_logger.error("Bad physical environment {} cannot initialize application", physicalEnv);
            return;
        }
        m_logicalEnv = physicalEnv.substring(0, underscore);
        m_localHost = physicalEnv.substring(underscore + 1);
        if (!isInitialized() && x_api != null) {
            boolean isInitialized = x_api.JNA_SCSInitialize(getLocalEnvironmentName(), getLocalServerName(), 10000,
                    cb) != -1;
            setInitialized(isInitialized);
            m_cbThreadConf = new CallbackThreadInitializer(true, false, m_JNANotificationThreadName);
            m_JNAClassLoader = Thread.currentThread().getContextClassLoader();
        }
    }

    /**
     * 
     * this method stop the scadagen java connector
     */
    public void stop() {
        s_logger.info("Scadagen Java connector stopping...");
        if (isInitialized() && x_api != null) {
            x_api.JNA_SCSExit();
        }
    }

    /**
     * This method exits the scadagen java connector
     */
    public void exit() {
        s_logger.info("Scadagen Java connector C exit...");
        if (isInitialized() && x_api != null) {
            x_api.JNA_Exit(505);
        }
    }

    /**
     * Load the JNA API.
     */
    static {
        s_logger.info("load SCADAgen JNA API: IJNAXConnectorApi");
        try {
            x_api = (IJNAXConnectorApi) Native.loadLibrary(LIBRARY_NAME, IJNAXConnectorApi.class);
        } catch (Exception e) {
            s_logger.error("cannot load SCADAgen IJNAXConnectorApi : ", e);
        }
    }

}
