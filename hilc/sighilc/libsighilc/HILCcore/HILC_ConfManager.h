#ifndef __HILCCONFMANAGER_HILC_H__
#define __HILCCONFMANAGER_HILC_H__


#include "scs.h"
#include "asc.h"
#include <sstream>
#include <string>
#include <list>
#include <vector>
#include <ecomlib/confmanager.h>


using namespace std;


class HILC_ConfManager
{
private:
    static HILC_ConfManager* m_instance;
    HILC_ConfManager();

public:

    static HILC_ConfManager* getInstance();
    ScsStatus init(string hilcConf_Filename);
    ~HILC_ConfManager();
    string getConfValue(string keyName, string defaultValue) const;
    int getConfValue(string keyName, int defaultValue) const;

    // simple convention : les valeurs d'enum n'ont pas de signification Scadasoft
    enum HILC_CMD_TYPE
    {
        HILC_SIO_CMD_TYPE = 1,
        HILC_DIO_CMD_TYPE = 2,
        HILC_AIO_CMD_TYPE = 3
    };

// XML CONFIGURATION

//BDD PROJECT SPECIFIC NODE
    //ROOTS
	int HILC_ROOTS_NUMBER;
	std::vector<string> HILC_Roots;
    //DCI SIO
    string HILC_DCI_NODE_NAME;
    string HILC_SIO_NODE_NAME;
    string HILC_DIO_NODE_NAME;
    string HILC_AIO_NODE_NAME;
    //SEPARATOR
    string HILC_TAG_ALIAS;
    //ATTRIBUTES
    string HILC_ATTR_UNIVNAME;
    string HILC_ATTR_VALUE;
//HILC PARAMETERS
    //MAX SESSION
	int HILC_MAX_SESSIONS;
    //TIMER
    int HILC_TIMER_DELAY;
    //MESSAGE
    string HILC_MESSAGE_LOCALE;
    int HILC_MESSAGE_FORMAT_TYPE;
    int HILC_MESSAGE_TO_UPPER;
    //COMMAND ID
    int HILC_PREP_CMD_ID;
    int HILC_CONF_CMD_ID;
    //HILC CLASS
    int HILC_CLASS_NUMBER;
	int HILC_SCSTYPES_NUMBER;
    string HILC_CDV_EQPT;
    string HILC_REPITI_EQPT;
    string HILC_PML_EQPT;
    string HILC_SIG_EQPT;
    string HILC_AIG_EQPT;
    std::vector<string> HILC_EquipmentTypes;
	std::vector<string> HILC_ScsTypes;
	
    //DCI SUBSCRIPTION
    int HILC_ATT_NUMBER;
    string HILC_SESSIONSTATE;
    string HILC_CURRENTSTEP;
    string HILC_PREPSTATE;
    string HILC_CONFSTATE;
    //SIO COMMAND
    //BHE int HILC_SIO_TYPE_NUMBER;
    string HILC_SIO_ENTERSESSION_NAME;
    string HILC_SIO_PREPARATION_NAME;
    string HILC_SIO_CONFIRMATION_NAME;
    //DIO COMMAND
    //BHE int HILC_DIO_TYPE_NUMBER;
    string HILC_DIO_ENTERSESSION_NAME;
    string HILC_DIO_PREPARATION_NAME;
    string HILC_DIO_CONFIRMATION_NAME;
    //AIO COMMAND
    string HILC_AIO_ENTERSESSION_NAME;
    string HILC_AIO_PREPARATION_NAME;
    string HILC_AIO_CONFIRMATION_NAME;

    //COMMAND TYPE NAME
    string HILC_BLOCKING_CMD_NAME;
    string HILC_AUTHORIZATION_CMD_NAME;
    string HILC_EQT_RELEASE_CMD_NAME;
    //STEP NUMBER DEFINITION
    int HILC_NUMBER_OF_STEP;
    int HILC_ENTERSESSION_STEP_NUMBER;
    int HILC_PREPARATION_STEP_NUMBER;
    int HILC_CONFIRMATION_STEP_NUMBER;
    //ATTRIBUTE NUMBER DEFINITION
    int HILC_SESSIONSTATE_NUMBER;
    int HILC_CURRENTSTEP_NUMBER;
    int HILC_PREPSTATE_NUMBER;
    int HILC_CONFSTATE_NUMBER;
//EXTERNAL ALARM
    int HILC_K_ALA_EXTERN_01;
//STATE PATTERN CONFIGURATION
    string HILC_WAITING_STEP_NAME;
    int HILC_INITSESSION_COND_VALUE;
    //FallBack Mode
    string HILC_FALLBACK_CMDNAME;
    string HILC_FALLBACK_DCINAME;
    string HILC_FALLBACK_CLASS;
    string HILC_FALLBACK_EQPT;
    int HILC_FALLBACK_COND_VALUE;

    //STATE ENTERSESSION
    int HILC_STATE_ENTERSESSION_ATT1_CONDVALNUMBER;
    int HILC_STATE_ENTERSESSION_ATT1_CONDVAL1;
    int HILC_STATE_ENTERSESSION_ATT2_CONDVALNUMBER;
    int HILC_STATE_ENTERSESSION_ATT2_CONDVAL1;
    int HILC_STATE_ENTERSESSION_ATT1_ERROR_CONDVALNUMBER;
    int HILC_STATE_ENTERSESSION_ATT1_ERROR_CONDVAL1;
    int HILC_STATE_ENTERSESSION_ATT2_ERROR_CONDVALNUMBER;
    int HILC_STATE_ENTERSESSION_ATT2_ERROR_CONDVAL1;
    int HILC_STATE_ENTERSESSION_ATT2_ERROR_CONDVAL2;


    //STATE PREP
    int HILC_STATE_PREP_ATT1_CONDVALNUMBER;
    int HILC_STATE_PREP_ATT1_CONDVAL1;
    int HILC_STATE_PREP_ATT2_CONDVALNUMBER;
    int HILC_STATE_PREP_ATT2_CONDVAL1;
    int HILC_STATE_PREP_ATT1_ERROR_CONDVALNUMBER;
    int HILC_STATE_PREP_ATT1_ERROR_CONDVAL1;
    int HILC_STATE_PREP_ATT1_ERROR_CONDVAL2;
    int HILC_STATE_PREP_ATT2_ERROR_CONDVALNUMBER;
    int HILC_STATE_PREP_ATT2_ERROR_CONDVAL1;
    int HILC_STATE_PREP_ATT2_ERROR_CONDVAL2;
    //STATE WAITINGCONF
    int HILC_STATE_WAITINGCONF_ATT1_CONDVALNUMBER;
    int HILC_STATE_WAITINGCONF_ATT2_CONDVALNUMBER;
    int HILC_STATE_WAITINGCONF_ATT1_ERROR_CONDVALNUMBER;
    int HILC_STATE_WAITINGCONF_ATT1_ERROR_CONDVAL1;
    int HILC_STATE_WAITINGCONF_ATT1_ERROR_CONDVAL2;
    int HILC_STATE_WAITINGCONF_ATT2_ERROR_CONDVALNUMBER;
    int HILC_STATE_WAITINGCONF_ATT2_ERROR_CONDVAL1;
    //STATE CONF
    int HILC_STATE_CONF_ATT1_CONDVALNUMBER;
    int HILC_STATE_CONF_ATT1_CONDVAL1;
    int HILC_STATE_CONF_ATT2_CONDVALNUMBER;
    int HILC_STATE_CONF_ATT2_CONDVAL1;
    int HILC_STATE_CONF_ATT1_ERROR_CONDVALNUMBER;
    int HILC_STATE_CONF_ATT1_ERROR_CONDVAL1;
    int HILC_STATE_CONF_ATT1_ERROR_CONDVAL2;
    int HILC_STATE_CONF_ATT2_ERROR_CONDVALNUMBER;
    int HILC_STATE_CONF_ATT2_ERROR_CONDVAL1;
    int HILC_STATE_CONF_ATT2_ERROR_CONDVAL2;
    int HILC_STATE_CONF_ATT2_ERROR_CONDVAL3;

};

#endif //__HILCCONFMANAGER_HILC_H__
