
package com.thalesgroup.scadagen.wrapper.wrapper.client.generic.panel;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.google.gwt.event.logical.shared.SelectionEvent;
import com.google.gwt.event.logical.shared.SelectionHandler;
import com.google.gwt.event.shared.EventBus;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.user.client.ui.ResizeComposite;
import com.google.gwt.user.client.ui.Widget;
import com.thalesgroup.hypervisor.mwt.core.webapp.core.common.client.ClientLogger;
import com.thalesgroup.hypervisor.mwt.core.webapp.core.common.client.event.EntitySelectionInfo;
import com.thalesgroup.hypervisor.mwt.core.webapp.core.common.client.event.EqptSelectionChangeEvent;
import com.thalesgroup.hypervisor.mwt.core.webapp.core.common.client.event.EqptSelectionChangeEvent.EqptSelectionEventHandler;
import com.thalesgroup.hypervisor.mwt.core.webapp.core.ui.client.panel.EquipmentInfoPanel;
import com.thalesgroup.hypervisor.mwt.core.webapp.core.ui.client.panel.IClientLifeCycle;
import com.thalesgroup.scadagen.wrapper.wrapper.client.generic.layout.TabLayoutPanel;
import com.thalesgroup.scadasoft.gwebhmi.ui.client.commandPanel.ScsCommandPanel;

/**
 * A widget handling the creation of an information panel and a command panel
 * according to equipment selection events.
 */
public class InfoCommandTabPanel extends ResizeComposite
        implements IClientLifeCycle, EqptSelectionEventHandler, SelectionHandler<Integer> {

    /**
     * Widget containing the info panel and command panel
     */
    private final TabLayoutPanel tabLayoutPanel_;

    /**
     * Panel displaying equipments attributes
     */
    private EquipmentInfoPanel equipmentInfoPanel_;

    /**
     * Panel enabling to send commands
     */
    private Widget commandPanel_;
    
    private boolean enableInfoPanel_ = true;
    
    private boolean enableCmdPanel_ = true;

    /**
     * Keeps tracks of registered handlers (used for unsubscription)
     */
    private final List<HandlerRegistration> listHandlerRegistrations_ = new ArrayList<HandlerRegistration>();

    private int currentTab_ = 0;
    private boolean listenToTabSelectionEvent_ = false;

    /** Logger */
    private final ClientLogger s_logger = ClientLogger.getClientLogger();

    /**
     * Builds an {@link InfoCommandTabPanel} widget.
     *
     * @param eventBus
     *            a bus used to listen to equipments selection events
     */
    public InfoCommandTabPanel(final EventBus eventBus) {
        tabLayoutPanel_ = new TabLayoutPanel();

        final HandlerRegistration busRegistration = eventBus.addHandler(EqptSelectionChangeEvent.TYPE, this);
        listHandlerRegistrations_.add(busRegistration);

        // Listen tab selection events generated by the tab panel
        listHandlerRegistrations_.add(tabLayoutPanel_.addSelectionHandler(this));

        initWidget(tabLayoutPanel_);
    }
    
    public void setEnableInfoPanel(boolean enable) {
    	enableInfoPanel_ = enable;
    }
    
    public void setEnableCmdPanel(boolean enable) {
    	enableCmdPanel_ = enable;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void terminate() {
        for (final HandlerRegistration handlerRegistration : listHandlerRegistrations_) {
            handlerRegistration.removeHandler();
        }
        listHandlerRegistrations_.clear();

        removeWidgets();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void onSelectionChange(final EqptSelectionChangeEvent event) {
        listenToTabSelectionEvent_ = false;
        removeWidgets();

        final Map<String, EntitySelectionInfo> entityIds = event.getSelectionInfo();
        if (entityIds != null && entityIds.size() > 0) {

            final String equipmentType = getEquipmentType(entityIds);

            // For now, this is mandatory because KeySet class is not
            // serializable
            final Set<String> eqptIds = new HashSet<String>();

            // add only equip of same type
            for (Entry<String, EntitySelectionInfo> entry : entityIds.entrySet()) {
                if (equipmentType.equals(entry.getValue().getEntityClassName())) {
                    eqptIds.add(entry.getKey());
                }
            }

            // Info panel
            if (enableInfoPanel_) {
            	equipmentInfoPanel_ = new EquipmentInfoPanel(eqptIds, equipmentType);
            	if (equipmentInfoPanel_ != null) {
            		tabLayoutPanel_.add(equipmentInfoPanel_, "Info", false);
            	}
            }

            // Command panel
            if (enableCmdPanel_) {
	            commandPanel_ = new ScsCommandPanel(eqptIds, equipmentType);
	            if (commandPanel_ != null) {
	                tabLayoutPanel_.add(commandPanel_, "Commands", false);
	            }
            }

            tabLayoutPanel_.selectTab(currentTab_);
            listenToTabSelectionEvent_ = true;
        }
    }

    /**
     * Returns the qualified name of an equipment type from a map of entities
     * ids / entities type.
     * <p>
     * Note that if the map of equipments contains different types, the returned
     * type is randomly selected.
     * </p>
     *
     * @param entityIds
     *            a map of entities ids / entities type
     * @return the qualified name of the type
     */
    @SuppressWarnings("static-method")
    private String getEquipmentType(final Map<String, EntitySelectionInfo> entityIds) {
        String eqptType = null;

        if (entityIds != null) {
            eqptType = entityIds.values().iterator().next().getEntityClassName();
        }
        return eqptType;
    }

    /**
     * Remove information panel and command panel.
     */
    public void removeWidgets() {
        // Info panel
        if (equipmentInfoPanel_ != null) {
            tabLayoutPanel_.remove(equipmentInfoPanel_);
            equipmentInfoPanel_ = null;
        }
        // Command panel
        if (commandPanel_ != null) {
            tabLayoutPanel_.remove(commandPanel_);
            commandPanel_ = null;
        }
    }

    @Override
    public void onSelection(SelectionEvent<Integer> event) {
        if (listenToTabSelectionEvent_) {
            currentTab_ = event.getSelectedItem();
            s_logger.debug("InfoCommandTabPanel selected index: " + currentTab_);
        }
    }
}
